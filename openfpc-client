#!/usr/bin/perl -I.
#########################################################################################
# Copyright (C) 2013 Leon Ward 
# openfpc-client.pl - Part of the OpenFPC - (Full Packet Capture) project
#
# Contact: leon@rm-rf.co.uk
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#########################################################################################

use strict;
use warnings;
use Data::Dumper;
use IO::Socket::INET;
use OFPC::Request; 
use OFPC::Parse;
use Getopt::Long;
use Switch;
use Digest::MD5(qw(md5_hex));
use Digest::SHA;
use Term::ReadKey;
use JSON::PP;

my $now=time();
my $openfpcver="0.8";
my (%config,$verbose);
my $password=0;
my $debug=OFPC::Request::wantdebug();
my $r2=OFPC::Request::mkreqv2();

# Hint: "ofpc-v1 type:event sip:192.168.222.1 dip:192.168.222.130 dpt:22 proto:tcp timestamp:1274864808 msg:Some freeform text";
my %cmdargs=( user => 0,
	 	password => 0, 
		server => "localhost",
		port => "4242",
		action => "fetch",
		logtype => "auto",
		filetype => "PCAP",
		debug => 0,
		verbose => 0,
		filename => "/tmp/pcap-openfpc-$now",
		logline => 0,
		quiet => 0,
		gui => 0,
		sumtype =>0,
		last => 0,
		hash => 0,
		);

my %result=(
		success => 0,
		filename => 0,
		position => 0,
		md5 => 0,
		expected_md5 => 0,
		message => 0,
		size => 0,
	);

sub showhelp{
	print <<EOF 
  ./openfpc-client <options>

  --------   General   -------
  -server or -s <openfpc server IP>      OpenFPC server to connect to
  -port or -o <TCP PORT>                 Port to connect to (default 4242)
  -user or -u <username>                 Username	
  -password or -p <password>             Password (if not supplied, it will be prompted for)
  -device                                Node name you would like the proxy to extract from
  -action or -a <action>                 Action to take. fetch, store, status, summary, search
  -verbose or -v                         Run in verbose mode
  -debug or -d                           Run in debug mode
  -write or -w                           Output PCAP file to write to
  -quiet or -q                           Quiet. Only print saved filename||error
  -gui	or -g                            Output that's parseable via OpenFPC's gui (or other tool)
  -comment or -m                         Comment for session
  -device                                OpenFPC Node to extract from (via OpenFPC-Proxy --server)
  -hash or -H                            Dont generate SHA1 from password. Assume it is a hash.

  -------- Traffic Constraints -------
  -bpf                                   Specify constraints with a BPF syntax
  -logline or -e <line>                  Logline, must be supported by OFPC::Parse
  -src-addr or sip <host>                Source IP
  -dst-addr or dip <host>                Destination IP
  -src-port or spt <port>                Source Port
  -dst-port or -dpt <port>               Destination Port
  -vlan <vlan>                           VLAN (NOT DONE YET)

  -------- Connection Data -------
  -summtype or summary_type <table>      Connection Summary table can be one of
	    top_source_ip_by_connection		 <- these tables
	    top_source_ip_by_volume
	    top_destination_ip_by_connection
	    top_destination_ip_by_volume
	    top_source_tcp_by_connection
	    top_source_tcp_by_volume
	    top_destination_tcp_by_connection
	    top_destination_tcp_by_volume
	    top_destination_udp_by_connection
	    top_destination_udp_by_volume
	    top_source_udp_by_connection
	    top_source_udp_by_volume

  -------- Time Constraints -------
  --last <seconds>                       Specify relative time range to now ($now) 
  --timestamp	<timestamp>              Event timestamp
  --eachway <count>                      Expand timestamp over extra files
  --stime                                Start timestamp
  --etime                                End timestamp

EOF
}


=head2 readrcfile
	Read in an optional rc file found in a couple of default locations.
	This is to prevent a user from re-typing the same config options
	like --user, --server etc

	Takes, \%cmdargs,
	Return \%cmdargs,

	The return has some alternative values set. This way the command-line
	options override those in the rc file.
	-Leon
=cut
sub readrcfile{
	my $config=shift;

	my @rcfiles=("./openfpc-client.rc",			# CWD
			"$ENV{HOME}/.openfpc-client.rc",			# Personal
			"/etc/openfpc/openfpc-client.rc",	# System default
		);	
	my $rcfile=0;

	foreach my $file (@rcfiles) {
		if (-e $file) {
			print "* Reading configuration from $file\n";
			$rcfile=$file;
			last;
		}
	}

	if ($rcfile) {
		unless (open(RC, '<', "$rcfile")){
			return($config);
			print "* Error, unable to open rc file $rcfile";
		} else {
			while(<RC>) {
				chomp;
		        	if ( $_ =~ m/^[a-zA-Z]/) {
 		 	               (my $key, my $value) = split /=/, $_;
					# If config line looks valid, set it
					if (defined $config->{$key}) {
						$config->{$key} = $value;
					} else {
						print "* Invalid variable $key found in $rcfile \n";
					}
				}
			}
		}
	}
	return($config);
}

=head2 convbytes
	Convert a number of bytes into MB or GB
=cut
sub convbytes{
	my $bytes=shift;
	my $units="Bytes";
	if ($bytes =~ /\d+/) {
		if ($bytes >=1000000 ) {
			$bytes = sprintf( "%0.2f", $bytes/1000000 );
			$units = "GB";
		} elsif ( $bytes >= 1000000 ) {
			$bytes = sprintf( "%0.2f", $bytes/1000000 );
			$units = "MB";
		} 
	}
	return("$bytes $units");
}

sub bar{
	my $l=1;
	my $i=0;
	my $c="-";		# Default bar type
	$l=shift;
	$c=shift;
	while ($i < $l) {
		print $c;
		$i++;
	}
	print "\n";	
}

sub displayTable{
	my $r=shift;
	my $tj=$r->{'table'};
	my $t=decode_json($tj);
	my $len=15;				# Default length 
							#in case the table doesn't set it

	if (defined $t->{'len'}) {
		$len=$t->{'len'};
	}

	my $blen=5;						# Including the "row" entry
	if (defined $t->{'format'}) {
		foreach (@{$t->{'format'}}) {
			$blen=$blen+$_;
		}
	} else {
		$blen=40;
	}

	bar($blen,"=");	
	print " $t->{'title'}\n";
	bar($blen,"=");	
	print " Start: " . localtime($t->{'stime'}) . "\n";
	print " End  : " . localtime($t->{'etime'}) . "\n";
	print " Node : $t->{'nodename'}\n"							if (defined $t->{'nodename'});
	print " Rows : $t->{'size'}\n";
	bar($blen,"=");	

	# Colum heads. Line number is added after
	printf ("%5s", "Row");

	my $fc=0;
	foreach (@{$t->{'cols'}}) {
		if (defined $t->{'format'}[$fc]) {		# IF format is defined in the table, use it for output
			my $l=$t->{'format'}[$fc];			
			printf ("%${l}s", $_);	
		} else {	
			printf ("%${len}s", $_);
		}
		$fc++;
	}
	print "\n";

	my $i=0;
	my $table=$t->{'table'};
	while ($i < $t->{'size'}) {
		printf("%5s",$i);			# Line number at the start
		my $fc=0;				# Counter for format

		foreach (@{$t->{'table'}{$i}}) {
			if (defined $t->{'format'}[$fc]) {		# IF format is defined in the table, use it for output
				my $l=$t->{'format'}[$fc];			
				printf ("%${l}s", $_);
			} else {								# Use the default column format length
				#print "FORMAT $t->{'format'}[$fc]:";
				printf ("%${len}s", $_);
			}
			$fc++;
		} 
		print "\n";
		$i++;
	}
	bar($blen,"=");	
}

sub displayStatus{
	my $s=shift;
	my @d=(
		'ofpctype',
		'packetspace',
		'sessionspace',
		'savespace',
		'saveused',
		'packetused',
		'sessionused',
		'firstctx',
		'firstpacket',
		'ld1',
		'ld5',
		'ld15',
		'sessionlag',
		'sessioncount',
		);
	my $bar="=====================================\n";

	print $bar;
	print " Status from: $s->{'nodename'} \n"; 
    foreach my $n (@{$s->{'nodelist'}}) {
    	print $bar;
    	print " * Node: $n\n";

		foreach(@d) {
			if ($s->{$n}{$_}{'type'} eq 'p') {										
				# Percentage output
				print "   - $s->{$n}{$_}{'text'} : \t $s->{$n}{$_}{'val'} %\n";
			} elsif ($s->{$n}{$_}{'type'} eq 'b') {									
				# Bytes / space output 
				print "   - $s->{$n}{$_}{'text'} : \t $s->{$n}{$_}{'val'} ";
				print "(" . convbytes($s->{$n}{$_}{'val'}) . ")\n"; 
			} elsif ($s->{$n}{$_}{'type'} eq 't') {									
				#  text / raw output
				print "   - $s->{$n}{$_}{'text'} : \t $s->{$n}{$_}{'val'} \n";
			} elsif ($s->{$n}{$_}{'type'} eq 'e') {									
				#  epoch timestamp format
				print "   - $s->{$n}{$_}{'text'} : \t $s->{$n}{$_}{'val'} ";
				print "(". localtime($s->{$n}{$_}{'val'}) . ")\n";
			}
   		}
    }  
}


sub displayResult{
	# TODO, why did I make $result a global?

	if ($result{'success'} == 1) { 			# Request is Okay and being processed
		unless ($cmdargs{'gui'}) {  		# Command line output
			if ($r2->{'action'}{'val'} eq "fetch") {	
				print 	"#####################################\n" .
					"Date    : " . localtime($now) . "\n" .
					"Filename: $result{'filename'} \n" .
					"Size    : $result{'size'}\n" .
					"MD5     : $result{'md5'}\n";
			} elsif ($r2->{'action'}{'val'} eq "store") {
				print 	"#####################################\n" .
				 	"Queue Position: $result{'position'} \n".
					"Remote File   : $result{'filename'}\n" .
					"Result        : $result{'message'}\n";
			} elsif ($r2->{'action'}{'val'} eq "status" ) {
				print 	"####################################\n" .
					" OpenFPC Node name   :  $result{'nodename'}\n".
					" OpenFPC Node Type   :  $result{'ofpctype'} \n".
					" OpenFPC Version     :  $result{'version'} \n".
					" Oldest Packet       :  $result{'firstpacket'} (" . localtime($result{'firstpacket'}) .")\n";

					if ($result{'firstctx'}) {
						print " Oldest Session      :  $result{'firstctx'} (" . localtime($result{'firstctx'}) .")\n";
					} else {
						print " Oldest Session      :  DISABLED\n";
					}

				print " Packet utilization  :  $result{'packetspace'}\% \n" .
					" Session utilization :  $result{'sessionspace'}\% \n" .
					" Session DB Size     :  $result{'sessioncount'} rows \n" .
					" Session lag         :  $result{'sessionlag'} files \n" .
					" Storage utilization :  $result{'savespace'}\% \n" .
					" Packet space used   :  $result{'packetused'} (" . convbytes($result{'packetused'}) . ")\n" .
					" Session space used  :  $result{'sessionused'} (" . convbytes($result{'sessionused'}) . ")\n" .
					" Storage used        :  $result{'saveused'} (" . convbytes($result{'saveused'}) . ")\n" .
					" Load avg 1          :  $result{'ld1'} \n" .
					" Load avg 5          :  $result{'ld5'} \n" .
					" Load avg 15         :  $result{'ld15'} \n" .
					" Errors              :  $result{'message'} \n";
			} elsif ($r2->{'action'}{'val'} eq "summary") {
				print 	"#####################################\n" .
					" Summary Table       :  $r2->{'sumtype'}{'val'}\n" .
					" Time Range          :  " . localtime($r2->{'stime'}{'val'}) . " -> " . localtime($r2->{'etime'}{'val'}) . "\n" .
					"#####################################\n";
				my $table=$result{'table'};

                                foreach my $foo (@$table) {
                                	foreach (@$foo) {
                                		printf '%15s', "$_";
                                	}
                                }
			} else {
				die("Results: Unknown action: $r2->{'action'}{'val'}\nSorry I don't know how to display this data.");
			}
		} else {	
			# GUI firendly output
			# Provide output that is easy to parse
			# result=0   	Fail
			# result=1	success
			# result,action,filename,size,md5,expected_md5,position,message

			print "1,$r2->{'action'}{'val'},$result{'filename'},$result{'size'},$result{'md5'},$result{'expected_md5'}," .
				"$result{'position'},$result{'message'}\n";
		}
	} else {				# Problem with request, provide fail info
		if ($cmdargs{'gui'}) {
			print "0,$r2->{'action'}{'val'},$result{'filename'},$result{'size'},$result{'md5'},$result{'expected_md5'}," .
				"$result{'position'},$result{'message'}\n";
		} else {
			print "Problem processing request: $result{'message'}\n";
			print "Expected: $result{'expected_md5'}\n" if ($result{'expected_md5'});
			print "Got     : $result{'md5'}\n" if ($result{'md5'});
		}
	}
}

# Read in defailts from openfpc-client.rc if discovered
my $tempref=readrcfile(\%cmdargs);
%cmdargs=%$tempref;

GetOptions (    'u|user=s' => \$cmdargs{'user'},
		's|server=s' => \$cmdargs{'server'},
		'o|port=s' => \$cmdargs{'port'},
		'd|debug' => \$cmdargs{'debug'},
		'h|help' => \$cmdargs{'help'},
		'q|quiet' => \$cmdargs{'quiet'},
		'w|write=s'=> \$cmdargs{'filename'},
		'v|verbose' => \$cmdargs{'verbose'},
		't|logtype=s' => \$cmdargs{'logtype'},
		'e|logline=s' => \$cmdargs{'logline'},
		'a|action=s' => \$cmdargs{'action'},
		'p|password=s' => \$password,
		'm|comment=s' => \$cmdargs{'comment'},
		'g|gui'	=> \$cmdargs{'gui'},
		'z|zip' => \$cmdargs{'zip'},
		'timestamp|t=s' => \$cmdargs{'timestamp'},
		'src-addr|sip=s' => \$cmdargs{'sip'},
        'dst-addr|dip=s' => \$cmdargs{'dip'}, 
        'src-port|spt=s' => \$cmdargs{'spt'},
        'dst-port|dpt=s' => \$cmdargs{'dpt'},
        'proto=s' => \$cmdargs{'proto'},
		'node|device=s' => \$cmdargs{'device'},
		'stime=s' =>  \$cmdargs{'stime'},
		'etime=s' => \$cmdargs{'etime'},
		'bpf=s' => \$cmdargs{'bpf'},
		'sumtype|summary_type=s' => \$cmdargs{'sumtype'},
		'save' => \$cmdargs{'dbsave'},
		'l|last=s' => \$cmdargs{'last'},
		'H|hash' => \$cmdargs{'hash'},
		'limit=s' => \$cmdargs{'limit'},
    );


# Need to tidy this up.
$config{'server'} 	= $cmdargs{'server'}	if $cmdargs{'server'}; 
$config{'port'} 	= $cmdargs{'port'}	if $cmdargs{'port'};

########### rv2
$r2->{'user'}->{'val'} 			= $cmdargs{'user'}		if $cmdargs{'user'};
$r2->{'filename'}->{'val'} 		= $cmdargs{'filename'}	if $cmdargs{'filename'};
$r2->{'logtype'}->{'val'} 		= $cmdargs{'logtype'}   if $cmdargs{'logtype'};
$r2->{'action'}->{'val'} 		= $cmdargs{'action'}	if $cmdargs{'action'};
$r2->{'logline'}->{'val'} 		= $cmdargs{'logline'}	if $cmdargs{'logline'};
$r2->{'comment'}->{'val'} 		= $cmdargs{'comment'}   if $cmdargs{'comment'};
$r2->{'device'}->{'val'} 		= $cmdargs{'device'}	if $cmdargs{'device'};
$r2->{'filetype'}->{'val'} 		= "ZIP"					if $cmdargs{'zip'};
$r2->{'bpf'}->{'val'}			= $cmdargs{'bpf'}		if $cmdargs{'bpf'};
$r2->{'stime'}->{'val'} 		= $cmdargs{'stime'} 	if ($cmdargs{'stime'});
$r2->{'etime'}->{'val'}			= $cmdargs{'etime'} 	if ($cmdargs{'etime'});
$r2->{'sumtype'}->{'val'}		= $cmdargs{'sumtype'}   if ($cmdargs{'sumtype'});
$r2->{'save'}->{'val'}			= $cmdargs{'save'}   	if ($cmdargs{'save'});
$r2->{'limit'}->{'val'}			= $cmdargs{'limit'}   	if ($cmdargs{'limit'});


$r2->{'sip'}->{'val'}			= $cmdargs{'sip'}   	if ($cmdargs{'sip'});
$r2->{'dip'}->{'val'}			= $cmdargs{'dip'}   	if ($cmdargs{'dip'});
$r2->{'dpt'}->{'val'}			= $cmdargs{'dpt'}   	if ($cmdargs{'dpt'});
$r2->{'spt'}->{'val'}			= $cmdargs{'spt'}   	if ($cmdargs{'spt'});
$r2->{'proto'}->{'val'}			= $cmdargs{'proto'}   	if ($cmdargs{'proto'});
$r2->{'timestamp'}->{'val'}		= $cmdargs{'timestamp'} if ($cmdargs{'timestamp'});

if ($cmdargs{'debug'}) { 
	$debug=1;
	$verbose=1;
}

if ($cmdargs{'last'}) {
	$r2->{'etime'}->{'val'} = $now;
	$r2->{'stime'}->{'val'} = $now - $cmdargs{'last'};
}


# Provide a banner and queue position if were not in GUI or quiet mode
unless( ($cmdargs{'quiet'} or $cmdargs{'gui'})) {
	print "\n   * openfpc-client $openfpcver * \n   Part of the OpenFPC project\n\n" ;
#	$request{'showposition'} = 1;
}

if ($cmdargs{'help'}) {
	showhelp;
	exit 1;
}


# Check we have enough constraints to make an extraction with.
if ($r2->{'action'}{'val'} =~ m/(fetch|store)/)  {
	unless ($r2->{'logline'}->{'val'} or ($cmdargs{'bpf'} or $cmdargs{'sip'} or $cmdargs{'dip'} or $cmdargs{'spt'} or $cmdargs{'dpt'} )) {
		unless ($cmdargs{'gui'} )  {
			showhelp;
		} else {
			$result{'message'} = "Insufficient Constraints added. Please add some session identifiers";
			displayResult($cmdargs{'gui'});
			exit 1;
		}
		print "Error: This action requres a request line or session identifiers\n\n";
		exit;
	}
} elsif ($r2->{'action'}{'val'} eq "status" ) {
	print "DEBUG: Sending status request\n" if ($debug);
} elsif ($r2->{'action'}{'val'} eq "summary" ) {
	print "DEBUG: Sending Summary request" if ($debug);
} elsif ($r2->{'action'}{'val'} eq "search" ) {
	print "DEBUG: Sending Search request" if ($debug);
} else {
	die("Action \'$r2->{'action'}{'val'}\' invalid, or not implemented yet");
}

# If we are in GUI mode, PHP's escapecmd function could have broken out logline, lets unescape it

if ($cmdargs{'gui'}) {
	$r2->{'logline'}{'val'} =~ s/\\(.)/$1/g;
}

# Unless user has passed a user and password via cmdargs, lets request one.
unless ($r2->{'user'}->{'val'}) {
	print "Username: ";
	my $username=<STDIN>;
	chomp $username;
	$r2->{'user'}->{'val'} = $username;
}
	
unless ($password) {
	print "Password for user $r2->{'user'}{'val'} : ";
	ReadMode 'noecho';
	$password = ReadLine 0;
	chomp $password;
	ReadMode 'normal';
	print "\n";
}


unless ($cmdargs{'hash'}) {
	$r2->{'password'}{'val'} = OFPC::Request::mkhash($r2->{'user'}{'val'},$password);
} else {
	$r2->{'password'}{'val'} = $password;
}

my $sock = IO::Socket::INET->new(
				PeerAddr => $config{'server'},
                                PeerPort => $config{'port'},
                                Proto => 'tcp',
                                );  
unless ($sock) { 
	$result{'message'} = "Unable to create socket to server $config{'server'} on TCP:$config{'port'}\n"; 
	displayResult($cmdargs{'gui'});
	exit 1;
}

print "DEBUG: Connected to $config{'server'}\n" if ($debug);
%result=OFPC::Request::request($sock,$r2);
#$result=OFPC::Request::request($sock,$r2);

print "DEBUG: Sent Request\n" if ($debug);
close($sock);

unless ($result{'success'}) {
	print "OFPC Request Failed: $result{'message'}\n";
	exit 1;
}

# Output result to console
if ($r2->{'action'}{'val'} eq "status") {
	displayStatus(\%result);
} elsif ($r2->{'action'}{'val'} =~/(summary|search)/) {
	displayTable(\%result);
} else {
	displayResult($cmdargs{'gui'});
}

