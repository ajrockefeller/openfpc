#!/bin/bash 
### BEGIN INIT INFO
# Provides:          openfpc-node
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Open Full Packet Capture Node
# Description:       This is a network security tool designed to 
#                    collect full pcap from network traffic
### END INIT INFO

# Copyright (C) 2010 Edward FjellskÃ¥l
# Copyright (C) 2009 Leon Ward 

# ---------------- Nothing to do below here -------------
# List of config files to try in order

CONFIG_FILES="/etc/openfpc/openfpc-node.conf "

# Check if we have been passed a config file as $2.
# read the first config file found in order above.

if [ $2 ]; then
   if [ -f $2 ]; then
      CONFIG=$2
      echo "[*] Reading configuration file $CONFIG"
      source $CONFIG
   else
      echo -e "[!] Error: Cant find config file $CONFIG"
      exit 1
   fi 
else 
   for CONFIG in $CONFIG_FILES; do
      if [ -f $CONFIG ]; then
         echo "[*] Reading configuration file $CONFIG"
         source $CONFIG
         break
      fi
   done
fi

IAM=$(whoami)
DATE=$(date)
PATH=$PATH:/sbin:/usr/sbin
TCPDUMPOPTS="-Z root" 	
openfpcver=0.2
PID_FILE=openfpc-dl
PID_PATH=/var/run
FILENAME=openfpc-

if [ "$DONE" != "y" ]; then
   echo -e "[!] Configuration not complete.\n    Have you run openfpc-install.sh ?"
   exit 1
fi

if [ "$MULTI_BUFFER" == "1" ]; then
   CURRENT=$(cat $CURRENT_FILE 2>/dev/null) || CURRENT="SINGLE"
else
   CURRENT="SINGLE"
fi

function die() {
   echo $1
   exit 1
}

function clean() {
   if [ "$IAM" != "root" ]; then
      die "[!] Must be root"
   fi
   die "! Not done. It's on the todo list"
   # Remove all non-current pcap buffers to free up disk space
   echo [!] Are you sure you want to delete these old pcap buffers?
   RMFILES=$(ls $BUFFER_PATH/$NODENAME/pcap/ |grep -v $CURRENT)
   echo "$RMFILES"
   echo "---------------"
   read -p "Hit CTRL+C to stop, enter to delete (current buffer will not be affected)"
   rm $RMFILES
}

function openfpcqstart() {
   /etc/init.d/openfpc-queued start $2
}

function openfpcqstop() {
   /etc/init.d/openfpc-queued stop $2
}

function openfpcqstatus() {
   /etc/init.d/openfpc-queued status $2
}

function cxtrackerstart() {
   /etc/init.d/openfpc-cxtracker start $2
}

function cxtrackerstop() {
   /etc/init.d/openfpc-cxtracker stop $2
}

function cxtrackerstatus() {
   /etc/init.d/openfpc-cxtracker status $2
}

function cx2dbstart() {
   /etc/init.d/openfpc-cx2db start $2
}

function cx2dbstop() {
   /etc/init.d/openfpc-cx2db stop $2
}

function cx2dbstatus() {
   /etc/init.d/openfpc-cx2db status $2
}

function daemonloggerstart() {
   /etc/init.d/openfpc-daemonlogger start $2
}

function daemonloggerstop() {
   /etc/init.d/openfpc-daemonlogger stop $2
}

function daemonloggerstatus() {
   /etc/init.d/openfpc-daemonlogger status $2
}

function status()
{
    daemonloggerstatus
    openfpcqstatus
    cxtrackerstatus
    cx2dbstatus

    if ls $BUFFER_PATH/$NODENAME/pcap/* > /dev/null 2>&1
    then
        FIRSTBUFFER=$(ls -tr $BUFFER_PATH/$NODENAME/pcap/*|head -n 1)
        FIRSTPACKET=$(tcpdump -n -r $FIRSTBUFFER -c 1 -tttt 2>/dev/null |awk '{print $1 " " $2}')
        NOW=$(date +%Y-%m-%d\ %H:%M:%S)
        LASTBUFFER=$(ls -t $BUFFER_PATH/$NODENAME/pcap/*|head -n 1)
        EPOC_FIRST=$(date -d "$FIRSTPACKET" +%s)
        EPOC_LAST=$(date -d "$NOW" +%s)
        let EPOC_DELTA=($EPOC_LAST-$EPOC_FIRST)/60/60
        SIZE=$(du $BUFFER_PATH/$NODENAME/ -h | awk '{print $1}' | head -n1)
        USED=$(df $BUFFER_PATH/$NODENAME/ -h |grep ^/ |awk '{print $5}')

        echo -e " -  Time now                $NOW"
        echo -e " -  Oldest packet           $FIRSTPACKET"
        echo -e " -  Oldest File             $FIRSTBUFFER"
        echo -e " -  Using File              $LASTBUFFER"
        echo -e " -  Time Window             ~ $EPOC_DELTA hours"
        echo -e " -  Disk space used         $SIZE"
        echo -e " -  Partition utilization   $USED"
    else
        echo "[!] No current buffers found in $BUFFER_PATH/$NODENAME/pcap/ - Have you started it yet?"
    fi

    if [ $ENABLE_SESSION == 1 ]; then
        SESSION_LAG=$(ls -l $SESSION_DIR |grep -v failed | grep -v total | wc -l)
        echo -e " -  Session tempdir         $SESSION_DIR" 
        echo -e " -  Session lag             $SESSION_LAG"
    fi
}

case $1 in 
	start)
		daemonloggerstart
		cxtrackerstart
		openfpcqstart
	;;
	stop)
		cxtrackerstop
		daemonloggerstop
		openfpcqstop
	;;
	clean)
		clean	
	;;
	dlstart)
		daemonloggerstart
	;;
	dlstop)
		daemonloggerstop
	;;
	cxstart)
		cxtrackerstart
	;;
	cxstop)
		cxtrackerstop
	;;	
	qstop)
		openfpcqstop	
	;;	
	qstart)
		openfpcqstart
	;;	
	test)
		cxtrackerstop
	;;
	restart)
		cxtrackerstop
		daemonloggerstop
		openfpcqstop
		sleep 2
		daemonloggerstart
		cxtrackerstart
		openfpcqstart	
	;;
	status)
		status
	;;
	*)

         echo -e "
 Note: If config file is not specified it will search some default locations

 Usage: 
    openpfc-node <action> <configfile>

    ---------------------------
    openfpc start      - Start all OpenFPC services
    openfpc stop       - Stop all OpenFPC services
    openfpc status     - Show OpenFPC status
    openfpc clean      - Delete old buffers
    openfpc cxstart    - Start cxtracker only
    openfpc cxstop     - Stop cxtracker only
    openfpc dlstart    - Daemonlogger start
    openfpc dlstop     - Daemonlogger stop
    openfpc qstop      - OpenFPC Queued stop
    openfpc qstart     - OpenFPC Queued start
    ---------------------------
"	
	;;
esac
