#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          openfpc-pcap
# Required-Start:    
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Init script for starting daemonlogger for openfpc
# Description:       openfpc-pcap logs pcaps and organize in daily dirs
### END INIT INFO

# Change this maybe? Put it in openfpc.conf?
# "./openfpc-pcap cleandisk" can be use to clean up!
MAX_DISK_USE=98

# Check if we have been passed a config file as $2.
# read the first config file found in order above.
CONFIG_FILES="/etc/openfpc/openfpc.conf"

if [ $2 ]; then
   if [ -f $2 ]; then
      CONFIG=$2
      echo "[*] Reading configuration file $CONFIG"
      source $CONFIG
   else
      echo -e "[!] Error: Cant find config file $CONFIG"
      exit 1
   fi
else
   for CONFIG in $CONFIG_FILES; do
      if [ -f $CONFIG ]; then
         echo "[*] Reading configuration file $CONFIG"
         source $CONFIG
         break
      fi
   done
fi

LOGGER_PATH=`which $DAEMONLOGGER`
if [ "$LOGGER_PATH" == "" ]; then
   echo "[!] Binary for $DAEMONLOGGER is not in path!"
   exit
fi

if ! test -x $LOGGER_PATH ; then
    echo "[!] $LOGGER_PATH dosent exist or is not executable."
    exit 1
fi

PIDFILE=daemonlogger-$NODENAME.pid
PIDPATH=/var/run/

TZ=GMT
export TZ

# Make sure all the permissions come out right.
umask 077

# Make sure our default logging dir is there.
#if [ ! -d $LOG/$NODENAME ]; then
#  mkdir -p $LOG/$NODENAME/pcap/
#  chown -R $USER.$GROUP $LOG/$NODENAME 
#  #chmod 777 $LOG_DIR $LOG_DIR/$HOSTNAME
#fi
if [ ! -d $LOG/$NODENAME/pcap ]; then
  mkdir -p $LOG/$HOSTNAME/pcap
  #chown -R $USER.$GROUP $LOG_DIR/$HOSTNAME/pcap
  #chmod 777 $LOG_DIR/$HOSTNAME/pcap
fi
LOG_DIR="$LOG/$NODENAME/pcap"

start() {
 if [ ! -f $PIDPATH/$PIDFILE ]; then 
  if [ -x $LOGGER_PATH ]; then
    #if [ ! -d $LOG_DIR ]; then
    #  mkdir $LOG_DIR
    #  chmod 777 $LOG_DIR
    #fi

    #today=`date '+%Y-%m-%d'`
    #if [ ! -d $LOG_DIR/$today ]; then
    #  mkdir $LOG_DIR/$today
    #  chmod 777 $LOG_DIR/$today
    #fi
    CMD="$DAEMONLOGGER -d \
         -i $INTERFACE \
         -l $LOG_DIR \
         -M $DISK_SPACE \
         -s $FILE_SIZE \
         -p $PIDFILE \
         -P $PIDPATH \
         -n ofpc-$NODENAME-pcap "

    if [ -n "$BPF_FILTER" ]; then
        CMD="$CMD $BPF_FILTER"
    fi
    $CMD || die "[!] Unable to start daemonlogger !"
    PID=$!
    if [ $? = 0 ]; then
      echo "Success."
    else
      echo "Failed."
      exit
    fi
  fi 
 else
  if [Â ps `cat $PIDPATH/$PIDFILE`  > /dev/null ]; then
     echo "Daemonlogger already running."
  else
     echo "Looks like a stale pid file, removing and trying again..."
     rm -f $PIDPATH/$PIDFILE
     $0 start $2
  fi
 fi
}

stopproc() {
  if [ -f $PIDPATH/$PIDFILE ]; then
    kill `cat $PIDPATH/$PIDFILE`
    if [ $? = 0 ]; then
      echo "Success."
      rm -f $PIDPATH/$PIDFILE
    else
      kill -9 `cat $PIDPATH/$PIDFILE`
      if [ $? = 0 ]; then
         echo "Success."
         rm -f $PIDPATH/$PIDFILE
      else
         echo "Failed."
      fi
    fi
  fi
}

restart() {
  if [ -f $PIDPATH/$PIDFILE ]; then
    OLDPID=`cat $PIDPATH/$PIDFILE`
    # we need to nuke PIDFILE so that when we call start, it doesn't exit cause it thinks we are already running.
    rm $PIDPATH/$PIDFILE
    echo -n "Starting new process..."
    start
    echo -n "Killing old process..."
    kill $OLDPID
    if [ $? = 0 ]; then
      echo "Success."
    else
      kill -9 `cat $PIDPATH/$PIDFILE`
      if [ $? = 0 ]; then
         echo "Success."
      else
         echo "Failed."
      fi
    fi
  else
    echo "Error: $PIDPATH/$PIDFILE does not exist."
    echo "Checking for old process with ps."
    res=`$PS | $GREP "$LOGGER_PATH" | $GREP "$LOG_DIR" | $GREP -v grep | awk '{print $1}'`
    if [ $res ]; then
	echo "Old daemonlogger proccess found at pid $res, killing."
	kill $res
	if [ $? = 0 ]; then
	    echo "Success."
	    echo "Starting new process."
	    start
	else
            kill -9 $res
            if [ $? = 0 ]; then
               echo "Success."
            fi
	    echo "Failed."
	fi
    else
	echo "No old processes found."
	echo "Starting new process anyway."
	start
    fi
  fi
}

# This func checks the current space being used by LOG_DIR
# and rm's data as necessary.
cleandisk() {
  echo "Checking disk space (limited to ${MAX_DISK_USE}%)..."
  # grep, awk, tr...woohoo!
  CUR_USE=`df -P $LOG_DIR | grep -v -i filesystem | awk '{print $5}' | tr -d %`
  echo "  Current Disk Use: ${CUR_USE}%"
  if [ $CUR_USE -gt $MAX_DISK_USE ]; then
    # If we are here then we passed our disk limit
    # First find the oldest DIR
    cd $LOG_DIR
    OLDEST_FILE=`ls -t | tail -1`
    if [ "$OLDEST_FILE" != "" ]; then
       echo "  Removing file: $LOG_DIR/$OLDEST_FILE"
       rm -f $OLDEST_FILE
    else
       echo "  No more files in $LOG_DIR"
       echo "  Something else most be hogging your disk!"
       echo "Done."
       exit 0
    fi
    # Run cleandisk again as rm'ing one file might been enough
    # but we wait 5 secs in hopes any open writes are done.
    sync
    echo "  Waiting 1 sec for disk to sync..."
    sync
    sleep 1
    cleandisk
  else
    echo "Done."
  fi
}

case "$1" in
  start)
    start
    #cleandisk
    ;;
  stop)
    stopproc
    ;;
  restart)
    restart
    #cleandisk
    ;;
  cleandisk)
    cleandisk
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|cleandisk}"
esac
